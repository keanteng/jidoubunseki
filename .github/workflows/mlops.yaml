name: MLOps Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'config/**'
      - 'assessment/data/data/**'
  pull_request:
    branches: [ main ]
  schedule:
    # Run every 2 days at 2 AM UTC
    - cron: '0 2 */2 * *'
  workflow_dispatch:
    inputs:
      retrain_model:
        description: 'Force model retraining'
        required: false
        default: 'false'
        type: boolean
      deploy_to_production:
        description: 'Deploy to production after training'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.12'
  REGISTRY: docker.io
  IMAGE_NAME: loan-risk-api

jobs:
  ml-pipeline:
    name: Complete ML Pipeline
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true  # This ensures Git LFS files are downloaded

    - name: Pull LFS files
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git lfs install
        git lfs pull
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-2.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-2.txt
    
    - name: Create directories
      run: |
        mkdir -p data
        mkdir -p models
        mkdir -p logs
        mkdir -p mlruns
        
    - name: Verify LFS files are downloaded
      run: |
        echo "=== Verifying LFS files are properly downloaded ==="
        for file in assessment/data/data/*.csv; do
          if [ -f "$file" ]; then
            echo "Checking $file:"
            head -n 1 "$file"
            if head -n 1 "$file" | grep -q "version https://git-lfs"; then
              echo "❌ $file is still a Git LFS pointer!"
              exit 1
            else
              echo "✅ $file appears to be downloaded correctly"
            fi
          fi
        done
    
    # Data Processing Steps
    - name: Data merging and validation
      run: |
        python src/data/merge.py --config config/config.yaml
    
    - name: Data preprocessing
      run: |
        python src/preprocessing/preprocess.py --config config/config.yaml
    
    - name: Data splitting
      run: |
        python src/model/split.py --config config/config.yaml
    
    # Model Training Steps
    - name: Hyperparameter tuning
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        MLFLOW_TRACKING_URI: databricks
      run: |
        python src/model/tune.py --config config/config.yaml
    
    - name: Final model training
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        MLFLOW_TRACKING_URI: databricks
      run: |
        python src/model/final.py --config config/config.yaml
    
    # Model Testing
    - name: Install API testing dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Run API tests
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        MLFLOW_TRACKING_URI: databricks
      run: |
        # Start the Flask app in background
        python app.py &
        sleep 30
        
        # Run API tests
        python test/api-test.py
        
        # Kill the background Flask app
        pkill -f "python app.py" || true
    
    # Upload artifacts only once at the end to preserve structure
    - name: Upload complete ML artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ml-pipeline-artifacts
        path: |
          mlruns/
          models/
          data/
          logs/
          !data/.gitkeep
        retention-days: 30

  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [ml-pipeline]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_to_production == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download ML artifacts
      uses: actions/download-artifact@v4
      with:
        name: ml-pipeline-artifacts
        path: .
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=v{{date 'YYYY.MM.DD'}}-{{sha}}
          type=raw,value=build-${{github.run_number}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [docker-build-and-push]
    if: github.ref == 'refs/heads/main' && github.event.inputs.deploy_to_production == 'true'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate release tag
      id: tag
      run: |
        TAG="v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: ML Model Release ${{ steps.tag.outputs.tag }}
        body: |
          ## ML Model Release
          
          **Docker Image:** `${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest`
          
          **Docker Pull Command:**
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ```
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ### Changes
          - Model trained and validated
          - Docker image built and pushed
          - Ready for deployment
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  # just a placeholder
  # actual case will be a environment for testing
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
  # just a placeholder
  # as it is not in cloud
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    if: github.ref == 'refs/heads/main' && (github.event.inputs.deploy_to_production == 'true' || github.event_name == 'schedule')
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Production deployment successful!"
        elif [ "${{ needs.deploy-production.result }}" == "failure" ]; then
          echo "❌ Production deployment failed!"
        elif [ "${{ needs.deploy-production.result }}" == "skipped" ]; then
          echo "⏭️ Production deployment skipped"
        fi